import{_ as e,c as a,o as s,a as n}from"./app.02bc2fcb.js";const h=JSON.parse('{"title":"Eager loading helpers","description":"","frontmatter":{},"headers":[{"level":2,"title":"eagerLoad(Element|array $elements, array $eagerLoadingConfig)","slug":"eagerload-element-array-elements-array-eagerloadingconfig","link":"#eagerload-element-array-elements-array-eagerloadingconfig","children":[]}],"relativePath":"04-eager-loading-helpers.md"}'),o={name:"04-eager-loading-helpers.md"},l=n(`<h1 id="eager-loading-helpers" tabindex="-1">Eager loading helpers <a class="header-anchor" href="#eager-loading-helpers" aria-hidden="true">#</a></h1><h2 id="eagerload-element-array-elements-array-eagerloadingconfig" tabindex="-1"><code>eagerLoad(Element|array $elements, array $eagerLoadingConfig)</code> <a class="header-anchor" href="#eagerload-element-array-elements-array-eagerloadingconfig" aria-hidden="true">#</a></h2><p><code>eagerLoad()</code> provides sugar over the <a href="https://docs.craftcms.com/api/v3/craft-services-elements.html#method-eagerloadelements" target="_blank" rel="noreferrer">somewhat verbose service method for eager loading fields on Elements</a>.</p><p>This is particularly useful for adding eager loading to automatically defined route-based variables like <code>entry</code> and <code>category</code>, or to Global sets.</p><p><code>eagerLoad</code> combines the first two parameters from the native service method into one, by inferring the classname from the passed Element(s):</p><div class="language-twig"><button class="copy"></button><span class="lang">twig</span><pre><code><span class="line"></span>
<span class="line"><span style="color:#676E95;">{# Using the helper #}</span></span>
<span class="line"><span style="color:#89DDFF;">{% </span><span style="color:#89DDFF;">do</span><span style="color:#89DDFF;"> eagerLoad(</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">, [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myAssetField</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]) %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">{# Without the helper #}</span></span>
<span class="line"><span style="color:#89DDFF;">{% </span><span style="color:#89DDFF;">do</span><span style="color:#89DDFF;"> </span><span style="color:#A6ACCD;">craft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eagerLoadElements</span><span style="color:#89DDFF;">(className(</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">), [</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">], [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myAssetField</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]) %}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,6),r=[l];function t(p,c,d,i,g,y){return s(),a("div",null,r)}const m=e(o,[["render",t]]);export{h as __pageData,m as default};
