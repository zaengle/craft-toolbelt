import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19f61efe.js";const u=JSON.parse('{"title":"Custom Helpers","description":"","frontmatter":{},"headers":[],"relativePath":"07-custom.md","filePath":"07-custom.md"}'),p={name:"07-custom.md"},o=l(`<h1 id="custom-helpers" tabindex="-1">Custom Helpers <a class="header-anchor" href="#custom-helpers" aria-label="Permalink to &quot;Custom Helpers&quot;">​</a></h1><h2 id="choose-your-own-adventuretm" tabindex="-1">Choose Your Own Adventure™ <a class="header-anchor" href="#choose-your-own-adventuretm" aria-label="Permalink to &quot;Choose Your Own Adventure™&quot;">​</a></h2><p>Sometimes you need to define your own Twig helpers in order to abstract logic that is verbose or messy in Twig, or you want to use PHP functions that aren&#39;t available in Twig, and aren&#39;t built-n to Toolbelt. This plugin still allows you to do that too, but defining custom Twig functions, filters, tests and globals in the plugin&#39;s config file under a <code>custom</code> key.</p><p>In all cases, key names must be strings, as they will define the name of the helper, and the value should be a <a href="https://www.php.net/manual/en/language.types.callable.php" target="_blank" rel="noreferrer">callable</a>.</p><blockquote><h3 id="⚠-heads-up" tabindex="-1">⚠ <strong>Heads-up</strong> <a class="header-anchor" href="#⚠-heads-up" aria-label="Permalink to &quot;⚠&amp;nbsp;**Heads-up**&quot;">​</a></h3><p>If you find yourself writing a <em>lot</em> of custom helpers, it might be a sign that you should be using a different approach to your templates, or that you should be abstracting the logic into a service or module. A plugin config file is not the best place for a lot of logic, as it can quickly become hard for a human to parse what&#39;s going on. Use your own judgement, but we recommend using this functionality reasonably sparingly. If you think you&#39;ve found a common use case that should be folded into Toolbelt core, please <a href="https://github.com/zaengle/craft-toolbelt/issues/new" target="_blank" rel="noreferrer">open an issue</a> or (even better) <a href="https://github.com/zaengle/craft-toolbelt/compare" target="_blank" rel="noreferrer">a PR</a>.</p></blockquote><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p>Functions are defined under the <code>functions</code> key. Explicitly define any arguments you want to pass. Passing more / fewer arguments than defined will throw an error.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;functions&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;double&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> $price)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> =&gt; $price </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;functions&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;double&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> $price)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> =&gt; $price </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#E1E4E8;">{{ double(</span><span style="color:#79B8FF;">2.5</span><span style="color:#E1E4E8;">) }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#24292E;">{{ double(</span><span style="color:#005CC5;">2.5</span><span style="color:#24292E;">) }}</span></span></code></pre></div><p><a href="https://twig.symfony.com/doc/3.x/templates.html#functions" target="_blank" rel="noreferrer">See the Twig Functions documentation for more information</a></p><h2 id="filters" tabindex="-1">Filters <a class="header-anchor" href="#filters" aria-label="Permalink to &quot;Filters&quot;">​</a></h2><p>Filters are defined under the <code>filters</code> key. They always have at least one argument, but can have any number of them.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;filters&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// PHP func name</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;reverse&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;strrev&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// closure</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;verboseReverse&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $str)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">strrev</span><span style="color:#E1E4E8;">($str),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// old skool callable array syntax</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;myFilter&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;\\My\\Class&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;myFilter&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;filters&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// PHP func name</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;reverse&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;strrev&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// closure</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;verboseReverse&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $str)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">strrev</span><span style="color:#24292E;">($str),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// old skool callable array syntax</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;myFilter&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;\\My\\Class&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;myFilter&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;Step on no pets&#39;</span><span style="color:#E1E4E8;"> | reverse)  </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Step on no pets&#39;</span><span style="color:#E1E4E8;"> %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    It&#39;s a palindrome!</span></span>
<span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">endif</span><span style="color:#E1E4E8;"> %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#24292E;">{% </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;Step on no pets&#39;</span><span style="color:#24292E;"> | reverse)  </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Step on no pets&#39;</span><span style="color:#24292E;"> %}</span></span>
<span class="line"><span style="color:#24292E;">    It&#39;s a palindrome!</span></span>
<span class="line"><span style="color:#24292E;">{% </span><span style="color:#D73A49;">endif</span><span style="color:#24292E;"> %}</span></span></code></pre></div><p><a href="https://twig.symfony.com/doc/3.x/templates.html#filters" target="_blank" rel="noreferrer">See the Twig Filters documentation for more information</a></p><h2 id="tests" tabindex="-1">Tests <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;Tests&quot;">​</a></h2><p>Tests are defined under the <code>tests</code> key. They always have one argument.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;tests&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;even&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> $number)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> =&gt; $number </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;tests&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;even&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> $number)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> =&gt; $number </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> isEven %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    2 is even</span></span>
<span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">endif</span><span style="color:#E1E4E8;"> %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#24292E;">{% </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> isEven %}</span></span>
<span class="line"><span style="color:#24292E;">    2 is even</span></span>
<span class="line"><span style="color:#24292E;">{% </span><span style="color:#D73A49;">endif</span><span style="color:#24292E;"> %}</span></span></code></pre></div><p><a href="https://twig.symfony.com/doc/3.x/templates.html#tests" target="_blank" rel="noreferrer">See the Twig Tests documentation for more information</a></p><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><p>Globals are defined under the <code>globals</code> key. They always have one argument</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;globals&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;now&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;globals&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;now&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#E1E4E8;">{{ now }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#24292E;">{{ now }}</span></span></code></pre></div><h3 id="a-caveat-about-globals" tabindex="-1">A Caveat about Globals <a class="header-anchor" href="#a-caveat-about-globals" aria-label="Permalink to &quot;A Caveat about Globals&quot;">​</a></h3><blockquote><p>⚠️<strong>Warning</strong> Be careful when assigning globals to expression values, as they are evaluated on every request. If you need to defining a global that is potentially expensive to compute, consider either using a function instead, or returning an instance of a class, and calling a method on that to get the value.</p></blockquote><p>If you just need to return a value, you should consider whether <a href="https://craftcms.com/docs/4.x/config/#custom-settings" target="_blank" rel="noreferrer">custom config settings</a> might be a better fit for your use case.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExpensiveClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spend</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Dollar dollar bill yall&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;globals&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#6A737D;">//           This is safe, as it is very cheap to compute (although it also already exists as a global, so don&#39;t add this too)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;now&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#6A737D;">//           but if your result is expensive/slow (because it hits the database, or does a lot of work), use a function</span></span>
<span class="line"><span style="color:#6A737D;">//           or class instead... also this would probably be better as a \`function\` definition, not a \`global\`</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;expensive&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#9ECBFF;">&quot;Let&#39;s just pretend this is expensive to compute for the purposes of this example, ok?&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;money&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ExpensiveClass</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// config/toolbelt.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExpensiveClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spend</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Dollar dollar bill yall&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;globals&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#6A737D;">//           This is safe, as it is very cheap to compute (although it also already exists as a global, so don&#39;t add this too)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;now&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#6A737D;">//           but if your result is expensive/slow (because it hits the database, or does a lot of work), use a function</span></span>
<span class="line"><span style="color:#6A737D;">//           or class instead... also this would probably be better as a \`function\` definition, not a \`global\`</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;expensive&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> =&gt; </span><span style="color:#032F62;">&quot;Let&#39;s just pretend this is expensive to compute for the purposes of this example, ok?&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;money&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ExpensiveClass</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#E1E4E8;">{{ now }}</span></span>
<span class="line"><span style="color:#E1E4E8;">{{ expensive() }}</span></span>
<span class="line"><span style="color:#E1E4E8;">{{ money.spend() }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">{# Usage #}</span></span>
<span class="line"><span style="color:#24292E;">{{ now }}</span></span>
<span class="line"><span style="color:#24292E;">{{ expensive() }}</span></span>
<span class="line"><span style="color:#24292E;">{{ money.spend() }}</span></span></code></pre></div><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Twig</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Globals</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">documentation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">more</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">information</span><span style="color:#E1E4E8;">](</span><span style="color:#79B8FF;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//twig.symfony.com/doc/3.x/templates.html#globals)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">See</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">the</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Twig</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Globals</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">documentation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">more</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">information</span><span style="color:#24292E;">](</span><span style="color:#005CC5;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//twig.symfony.com/doc/3.x/templates.html#globals)</span></span></code></pre></div><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">​</a></h2><p>This functionality was inspired by the <a href="https://github.com/oof-bar/craft-twig-toolbox" target="_blank" rel="noreferrer">Craft Twig Toolbox plugin</a> but was re-written for this plugin. All credit to <a href="https://oof.studio/" target="_blank" rel="noreferrer">oof</a> for the original idea.</p>`,32),e=[o];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
